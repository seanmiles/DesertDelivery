<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_p_move</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_player</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
event_inherited();
hsp = 0;
vsp = 0;

global.energy_max = 100;
global.energy = 65;

passive_loss = 0.050;
heatwave_loss = 2;
boost_loss = 25;

move = 0;
grounded = false;
hit = false;
boost = false;
hitCounter = 0;
slideCounter = 0;
slideSound = false;
startCounter = 0;
boostCounter = 0;
boostTime = 30;
startDelay = 30;
constant_speed_normal = 20;
move_speed_normal = 7;
jump_speed_normal = 60.5;
constant_speed = constant_speed_normal;
move_speed = move_speed_normal;
jump_speed = jump_speed_normal;

hsp_max = constant_speed_normal + move_speed_normal;
vsp_max = jump_speed_normal;

// States
enum st
{
    start,
    normal,
    death
}

// Normal
state = st.start;

// Camera
instance_create(x + 512, view_yview[0] + 512, ctrl_camera);
instance_create(view_xview[0] - 256, view_yview[0], obj_heatwave);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input, Misc.
// ---------------------- Input ----------------------
key_right               = max(keyboard_check(ord("D")),keyboard_check(vk_right),(gamepad_axis_value(0, gp_axislh) &gt; 0),0);
key_left                = -max(keyboard_check(ord("A")),keyboard_check(vk_left),(gamepad_axis_value(0, gp_axislh) &lt; 0),0);
key_down                = max(keyboard_check(ord("S")),keyboard_check(vk_down),(gamepad_axis_value(0, gp_axislv) &gt; 0),0);
key_down_released       = max(keyboard_check_released(ord("S")),keyboard_check_released(vk_down),0);
key_up                  = max(keyboard_check(ord("W")),keyboard_check(vk_up),(gamepad_axis_value(0, gp_axislv) &lt; 0),0);
key_jump                = max(keyboard_check_pressed(vk_space),(gamepad_button_check_pressed(0, gp_face1)),0);
key_jump_held           = max(keyboard_check(vk_space),(gamepad_button_check(0, gp_face1)),0);
key_boost               = max(keyboard_check_pressed(ord("Q")),(gamepad_button_check_pressed(0, gp_shoulderr)),(gamepad_button_check_pressed(0, gp_shoulderl)),0);

// ---------------------- Check In All States ----------------------
global.energy = clamp(global.energy,0,100);
if(global.energy &lt;= 0 &amp;&amp; instance_place(x, y, par_edge))
{
    state = st.death;
}

grounded = place_meeting(x,y + 1,par_tile);

// Prevent Leaving Room
x = clamp(x, view_xview[0], view_xview[0] + view_wview[0]);
y = clamp(y, 0, room_height + 1024);

//Parallax Scrolling Background
background_x[0] = view_xview/1.5;
background_x[1] = view_xview/1.8;
background_x[2] = view_xview/1.8;

// Engine
if(hsp != 0 &amp;&amp; !audio_is_playing(snd_engine))
{
    audio_play_sound(snd_engine,0,true);
}

// Energy Consumption
if(global.energy != 0)
{
    if(hsp != 0 &amp;&amp; !instance_place(x, y, par_edge))
    {
        global.energy -= passive_loss;
    }
    else if(instance_place(x, y, par_edge))
    {
        global.energy -= heatwave_loss;
    }
    
    if(boost == true &amp;&amp; boostCounter == 1)
    {
        global.energy -= boost_loss;
    }
}

if(!audio_is_playing(music_so_lets_see))
{
    audio_play_sound(music_so_lets_see,0,true);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// States
switch(state)
{
// ----------------------- Start -----------------------
    case st.start:

    if(startCounter != startDelay)
    {
        startCounter++;
        startCounter = clamp(startCounter, 0, startDelay);
    }
    else if(startCounter == startDelay)
    {
        state = st.normal;
    }
    
    break;
    
// ---------------------- Normal ----------------------
    case st.normal:
    
    // Properties
    move = key_left + key_right;
    
    // End Boost
    if(boost == true)
    {
        boostCounter++;
        boostCounter = clamp(boostCounter, 0, boostTime);
        if(boostCounter == boostTime)
        {
            boost = false;
            boostCounter = 0;
            move_speed = move_speed_normal;
            jump_speed = jump_speed_normal;
            constant_speed = constant_speed_normal;
            hsp = constant_speed + (move * move_speed);
        }
    }
    
    // Normal Speeds while not Sliding or while Sliding and Hit
    if(!key_down || (key_down &amp;&amp; hit == true) || (key_down &amp;&amp; boost == true &amp;&amp; global.energy &lt;= 0))
    {
        // Speed
        move_speed = move_speed_normal;
        jump_speed = jump_speed_normal;
        if(boost == false || global.energy &lt;= 0)
        {
            constant_speed = constant_speed_normal;
        }
        slideSound = false;
        slideCounter = 0;
        
        // Boost
        if(key_boost &amp;&amp; boost == false &amp;&amp; global.energy &gt;= boost_loss)
        {
            // Speed Boost
            constant_speed *= 2;   
            boost = true;
            audio_play_sound(snd_boost,0,false);
        }
        
        // Movement
        if(hit == true)
        {
            if(global.energy &lt;= 0)
            {
                // Very Slow while Hit and Energy is Depleted
                hsp = 3;
            }
            else
            {
                // Slow while Hit
                hsp = constant_speed + ((move * move_speed) / 2) - 10;
            }
        }
        else
        {
            if(global.energy &lt;= 0)
            {
                // Slow while Hit and Energy is Depleted
                hsp = constant_speed + ((move * move_speed) / 2) - 3;
            }
            else
            {
                // Normal Movement
                hsp = constant_speed + (move * move_speed);
            }
        }
    }
    
    // Prevent Sliding Backwards at a very slow speed
    if(key_down &amp;&amp; hsp == 2 &amp;&amp; slideCounter != 120 &amp;&amp; boost == false &amp;&amp; hit == false)
    {
        hsp = 15;
    }
    
    //Gravity
    if (vsp &lt; vsp_max &amp;&amp; !grounded)
    {
        vsp += global.grav;
    }
    else
    {
        if(grounded)
        {
            vsp = 0;
        }
    }
    
    // Jump
    if(grounded &amp;&amp; key_jump)
    {
        vsp = -jump_speed;
    }
    // Variable Jump
    if(vsp &lt; 0) &amp;&amp; (!key_jump_held)
    {
        vsp = max(vsp, -jump_speed / 240);
        //vsp += global.grav;
    }
    
    // Crouch in Animation
    
    // Invulnerability while Hit
    if(hit == false)
    {
        // Obstacle Collision
        if(instance_place(x,y,par_obstacle) &amp;&amp; boost == false)
        {
            hit = true;
            if(!audio_is_playing(snd_impact))
            {
                audio_play_sound(snd_impact,0,false);
            }
            //instance_destroy(instance_place(x,y,par_obstacle));
        }
        // Invulnerable while Boosting and Destroy Obstacles
        else if(instance_place(x,y,par_obstacle) &amp;&amp; boost == true)
        {
            instance_destroy(instance_place(x,y,par_obstacle));
        }
    }
    
    // Time until Vulnerable Again
    if(hit == true)
    {
        hitCounter++;
        hitCounter = clamp(hitCounter,0,50);
        image_alpha = 0.5;
        if(hitCounter == 50)
        {
            hit = false;
            hitCounter = 0;
        }
    }
    // Normal/Vulnerable
    else
    {
        image_alpha = 1;
    }
    
    // Collision
    scr_collide();
    
    break;

// ---------------------- Death ----------------------
    case st.death:
    
    global.energy = global.energy_max;
    room_restart();
    
    break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animation

// Directional
image_xscale = 1;
if(hit == true)
{
    image_speed = 0.10;   
}
else
{
    image_speed = 0.15;
}

if(move == -1)
{
    image_speed -= 0.075;
}
else if(move == 1)
{
    image_speed += 0.075;
}

if(boost)
{
    image_speed += 0.1;
}

// Idle
if(state == st.start)
{
    sprite_index = spr_p_idle;
}

// Run
if(grounded &amp;&amp; state == st.normal)
{
    if(!key_down &amp;&amp; place_free(x, y - 256))
    {
        sprite_index = spr_p_move;
    }
    // Slide
    else if(key_down)
    {
        sprite_index = spr_p_slide;
        instance_create(x + 340,y + 484,obj_dust);
        // Slowly lose momentum after 2 seconds of not being hit
        if(hit == false)
        {
            slideCounter++;
            slideCounter = clamp(slideCounter,0,120);
            if(slideSound == false &amp;&amp; !audio_is_playing(snd_slide))
            {
                slideSound = true;
                audio_play_sound(snd_slide,0,false);   
            }
            if(slideCounter == 120)
            {
                hsp -= 0.25;
                hsp = clamp(hsp, 0, 50);
            }
        }
    }
}
else if(!grounded &amp;&amp; state == st.normal)
{
    /*//Fall
    if (vsp &gt;= 0)
    {
        sprite_index = spr_p_fall;
    }
    else 
    {*/
        //Jump
        if (vsp &lt; 0)
        {
            sprite_index = spr_p_jump; 
        }
    //}
}

if(sprite_index == spr_p_slide &amp;&amp; !place_free(x, y - 256))
{
    sprite_index = spr_p_slide;   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_goal">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(other.next_room);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_energy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Consume Energy
if(!audio_is_playing(snd_energy_pickup))
{
    audio_play_sound(snd_energy_pickup,0,false);
}
with(other)
{
    global.energy += amount;
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="58">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(sprite_index = spr_p_jump)
{
    image_speed = 0;
    image_index = image_number - 1;
}

if(sprite_index = spr_p_slide)
{
    image_speed = 0;
    image_index = image_number - 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// HUD Display
draw_set_color(c_aqua);
display_set_gui_maximise(1, 1);
//draw_roundrect(385, 480, 552, 498, false);
global.energy_percent = floor(global.energy * 352 / global.energy_max);
global.energy_percent = clamp(global.energy_percent, 0, 352);

draw_sprite(spr_energy_back, 0, 1140, 1080);
draw_roundrect(768, 983, 768 + global.energy_percent, 1047, false);
draw_sprite(spr_energy, 0, 1140, 1080);
display_set_gui_maximise(0.5, 0.5);
draw_sprite(spr_ice, 0, 1250, 1890);
display_set_gui_maximise(1, 1);

draw_set_color(c_white);
draw_roundrect(708, 10, 1180, 50, false);
player_pos = x * 472 / room_width;
heatwave_pos = obj_heatwave.x * 472 / room_width;
draw_set_color(c_red);
draw_sprite(spr_minimap_icon, 0, 708 + player_pos, 20);
c_heatwave = make_color_rgb(255, 87, 0);
draw_set_color(c_heatwave);
draw_set_alpha(0.5);
draw_roundrect(708, 10, 708 + heatwave_pos, 50, false);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug
/*draw_set_color(c_white);
draw_text(150,10,"x: " + string(x));
draw_text(150,40,"y: " + string(y));
draw_text(150,70,"left border: " + string(view_xview[0]));
draw_text(150,100,"right border: " + string(view_xview[0] + view_wview[0]));
draw_text(10,10,"hsp: " + string(hsp));
draw_text(10,40,"vsp: " + string(vsp));
draw_text(10,70,"img: " + string(image_index));
draw_text(10,100,"hit: " + string(hitCounter));
draw_text(10,130,"slide: " + string(slideCounter));
draw_text(10,160,"boost: " + string(boost));
draw_text(10,190,"constant speed: " + string(constant_speed));*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
