<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize and Names
pause_menu[0] = "Restart";
pause_menu[1] = "Return to Menu";
pause_menu[2] = "Quit";

space = 192;
cursorcenterX = 1135;
cursorX = 1135;
frequency = 4;
amplitude = 20;
count = 0;
mpos = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ESC pressed
if(room != rm_menu)
{
    if(keyboard_check_pressed(vk_escape))
    {
        //Pause
        if(!global.pause)
        {
            //Pause all Instances
            global.pause = true;
            audio_pause_all();
            instance_deactivate_all(true);
        } 
        //Resume
        else 
        {
            //Resume all Instances
            global.pause = false;
            audio_resume_all();
            instance_activate_all();
        }
    }
    
    if(global.pause)
    {
        var move = 0;
        move -= max(keyboard_check_pressed(ord("W")),keyboard_check_pressed(vk_up),0);
        move += max(keyboard_check_pressed(ord("S")),keyboard_check_pressed(vk_down),0);
        
        if(move != 0)
        {
            //audio_play_sound(snd_cursormove,0,0);
            mpos += move;
            if(mpos &lt; 0)
            {
                mpos = array_length_1d(pause_menu) - 1;
            }
            if(mpos &gt; array_length_1d(pause_menu) - 1)
            {
                mpos = 0;
            }
        }
        
        var push;
        push = max(keyboard_check_pressed(vk_enter),keyboard_check_pressed(vk_shift),keyboard_check_pressed(vk_space),keyboard_check_pressed(ord("E")),0);
        if (push == 1)
        {
            //audio_play_sound(snd_cursorselect,0,0);
            scr_pause_menu();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pause Menu
if(room != rm_menu &amp;&amp; global.pause)
{
    draw_sprite(spr_pause,0,0,0);
    // Text
    display_set_gui_maximise(0.5,0.5);
    draw_set_font(font_chakra);
    draw_set_color(c_black);
    draw_set_halign(fa_center);
    scr_text_outline(1900,625,5,"Paused",c_white,c_black);
    draw_set_font(font_chakra_subtitle);
    draw_set_halign(fa_left);
    var m;
    for (m = 0; m &lt; array_length_1d(pause_menu); m += 1)
    {
        scr_text_outline(1435,875 + (m * space),5,string(pause_menu[m]),c_white,c_black);
    }
    
    // Sprites
    // Hover cursor using sine wave
    cursorX = cursorcenterX + dsin(count * frequency) * amplitude;
    count++;
    count = clamp(count,0,180);
    if(count == 180)
    {
        count = 0;
    }
    draw_sprite(spr_cursor,0,cursorX,855 + mpos * (space));
    display_set_gui_maximise(1,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
